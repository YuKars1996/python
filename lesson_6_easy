# Задача-1: Написать класс для фигуры-треугольника, заданного координатами трех точек.
# Определить методы, позволяющие вычислить: площадь, высоту и периметр фигуры.
import math

class triangle:
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3

def square (self):
    p = (self.angle1 + self.angle2 + self.angle3)/2
    return square(p * (p - self.angle1) * (p - self.angle2) * (p - self.angle3))

def height(self):
    p = (self.angle1 + self.angle2 + self.angle3) / 2
    return (2*square(p - self.angle1) * (p - self.angle2) * (p - self.angle3))/self.angle1

def perimeter(self):
    return self.angle1 + self.angle2 + self.angle3

# Задача-2: Написать Класс "Равнобочная трапеция", заданной координатами 4-х точек.
# Предусмотреть в классе методы:
# проверка, является ли фигура равнобочной трапецией;
# вычисления: длины сторон, периметр, площадь.

class Equal_Barrel:
    def __init__(self, side_x_1, side_y_1, side_x_2, side_y_2, side_x_3, side_y_3, side_x_4, side_y_4):
        self.side_x_1 = side_x_1
        self.side_y_1 = side_y_1
        self.side_x_2 = side_x_2
        self.side_y_2 = side_y_2
        self.side_x_3 = side_x_3
        self.side_y_3 = side_y_3
        self.side_x_4 = side_x_4
        self.side_y_4 = side_y_4


def smooth_sides(self):
    a = math.sqrt(((self.side_x_2 - self.side_x_1)**2) + ((self.side_y_2 - self.side_y_1)**2))
    b = math.sqrt(((self.side_x_4 - self.side_x_3)**2) + ((self.side_y_4 - self.side_y_3)**2))
    if a == b:
        print("Трапеция ранобокая!")
    else:
        print("Трапеция не равнобокая")


def side_length(self):
    a = math.sqrt(((self.side_x_2 - self.side_x_1) ** 2) + ((self.side_y_2 - self.side_y_1) ** 2))
    b = math.sqrt(((self.side_x_4 - self.side_x_3) ** 2) + ((self.side_y_4 - self.side_y_3) ** 2))
    m = (a + b)/2
    print("Длина первой стороны: ", (2*m - b), "Длина второй стороны: ", (2*m - a))
    
 def perimt (self):
    return ((self.side_x_1 + self.side_y_1)+ (self.side_x_2 + self.side_y_2) + (self.side_x_3 + self.side_y_3) + (self.side_x_4 + self.side_y_4))

def sqrt (self):
    return (((self.side_x_1 + self.side_x_2) + (self.side_y_1 + self.side_y_2))/2)*((sqrt(self.side_x_3 + self.side_y_3)**2) - (((((self.side_x_1 + self.side_y_1) - (self.side_x_2 + self.side_y_2)**2) + ((self.side_x_3 + self.side_y_3)**2) - ((self.side_x_4 + self.side_y_4)**2))/2*((self.side_x_1+self.side_y_1) - (self.side_x_2 + self.side_y_2)))**2))
